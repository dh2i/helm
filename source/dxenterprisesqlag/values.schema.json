{
    "$schema": "http://json-schema.org/schema#",
    "description": "",
    "type": "object",
    "required": [
        "synchronousReplicas",
        "sqlServerContainer",
        "dxEnterpriseContainer"
    ],
    "properties": {
        "synchronousReplicas": {
            "type": "integer",
            "description": "The quantity of synchronous availability group replicas",
            "minimum": 1,
            "maximum": 5
        },
        "asynchronousReplicas": {
            "type": "integer",
            "description": "The quantity of asynchronous availability group replicas",
            "minimum": 0,
            "maximum": 9
        },
        "configurationOnlyReplicas": {
            "type": "integer",
            "description": "The quantity of configuration-only availability group replicas",
            "minimum": 0,
            "maximum": 1
        },
        "availabilityGroupName": {
            "type": "string",
            "description": "The name of the availability group as it will appear in SQL Server and DxEnterprise. Default: AG1"
        },
        "availabilityGroupOptions": {
            "type": "string",
            "description": "Additional configuration options for this availability group, such as 'CONTAINED'"
        },
        "availabilityGroupClusterType": {
            "type": "string",
            "description": "The cluster type of the availability group. Valid values are \"NONE\" or \"EXTERNAL\". Default: EXTERNAL"
        },
        "availabilityGroupListenerPort": {
            "type": "integer",
            "description": "The listener port for the availability group, or 0 to disable",
            "minimum": 0,
            "maximum": 65535
        },
        "createLoadBalancers": {
            "type": "boolean",
            "description": "Whether or not to create load balancers for external access to the Kubernetes pods"
        },
        "sqlServerContainer": {
            "type": "object",
            "description": "The configuration for the Microsoft SQL Server container",
            "required": [
                "acceptEula",
                "mssqlSecret"
            ],
            "properties": {
                "acceptEula": {
                    "type": "boolean",
                    "description": "Whether or not the user accepts the SQL Server EULA"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository to pull the SQL Server image from."
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "The pull policy for the SQL Server image."
                },
                "tag": {
                    "type": "string",
                    "description": "The tag to use for the SQL Server image."
                },
                "mssqlSecret": {
                    "type": "string",
                    "description": "The secret containing the MSSQL_SA_PASSWORD",
                    "minLength": 1
                },
                "mssqlPID": {
                    "type": "string",
                    "description": "The product ID (edition) the SQL Server container will run with, or a license key"
                },
                "volumeClaimConfiguration": {
                    "type": ["object","null"],
                    "description": "Parameters for the DxEnterprise container",
                    "properties": {
                        "accessModes": {
                            "type": ["array","null"],
                            "description": "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                            "items": {
                                "type": ["string","null"]
                            }
                        },
                        "resources": {
                            "_$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.24.0/_definitions.json#/definitions/io.k8s.api.core.v1.ResourceRequirements",
                            "type": ["object","null"],
                            "description": "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources"
                        },
                        "storageClassName": {
                            "description": "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                            "type": ["string","null"]
                        }
                    }
                },
                "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                    "items": {
                        "_$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.24.0/_definitions.json#/definitions/io.k8s.api.core.v1.VolumeMount",
                        "type": "object"
                    },
                    "type": ["array","null"],
                    "x-kubernetes-patch-merge-key": "mountPath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "items": {
                        "_$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.24.0/_definitions.json#/definitions/io.k8s.api.core.v1.EnvVar",
                        "type": "object"
                    },
                    "type": ["array","null"],
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "items": {
                        "_$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.24.0/_definitions.json#/definitions/io.k8s.api.core.v1.EnvFromSource",
                        "type": "object"
                    },
                    "type": ["array","null"]
                },
                "readinessProbe": {
                    "_$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.24.0/_definitions.json#/definitions/io.k8s.api.core.v1.Probe",
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": ["object","null"]
                },
                "resources": {
                    "_$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.24.0/_definitions.json#/definitions/io.k8s.api.core.v1.ResourceRequirements",
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "type": ["object","null"]
                },
                "securityContext": {
                    "_$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.24.0/_definitions.json#/definitions/io.k8s.api.core.v1.SecurityContext",
                    "description": "SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                    "type": ["object","null"]
                }
            }
        },
        "dxEnterpriseContainer": {
            "type": "object",
            "description": "Parameters for the DxEnterprise container",
            "required": [
                "acceptEula",
                "clusterSecret"
            ],
            "properties": {
                "acceptEula": {
                    "type": "boolean",
                    "description": "Whether or not the user accepts the DxEnterprise EULA"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository to pull the DxEnterprise image from."
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "The pull policy for the DxEnterprise image."
                },
                "tag": {
                    "type": "string",
                    "description": "The tag to use for the DxEnterprise image."
                },
                "clusterSecret": {
                    "type": "string",
                    "description": "The secret containing a DX_PASSKEY, DX_LICENSE, and optional DX_OTPK environment variable(s).",
                    "minLength": 1
                },
                "vhostName": {
                    "type": "string",
                    "description": "The name of the DxEnterprise Vhost. Default: VHOST1",
                    "pattern": "^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*$"
                },
                "joinTarget": {
                    "type": "object",
                    "description": "The configuration for the external target cluster each pod will join to.",
                    "properties": {
                        "target": {
                            "type": ["string","null"],
                            "description": "The target hostname, IP, or FQDN for the join process."
                        },
                        "useNat": {
                            "type": "boolean",
                            "description": "Whether or not the target is a NAT match-making service."
                        }
                    }
                },
                "volumeClaimConfiguration": {
                    "type": ["object","null"],
                    "description": "Parameters for the DxEnterprise container",
                    "properties": {
                        "accessModes": {
                            "type": ["array","null"],
                            "description": "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                            "items": {
                                "type": ["string","null"]
                            }
                        },
                        "resources": {
                            "_$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.24.0/_definitions.json#/definitions/io.k8s.api.core.v1.ResourceRequirements",
                            "description": "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                            "type": ["object","null"]
                        },
                        "storageClassName": {
                            "description": "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                            "type": ["string","null"]
                        }
                    }
                },
                "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                    "items": {
                        "_$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.24.0/_definitions.json#/definitions/io.k8s.api.core.v1.VolumeMount",
                        "type": "object"
                    },
                    "type": ["array","null"],
                    "x-kubernetes-patch-merge-key": "mountPath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "items": {
                        "_$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.24.0/_definitions.json#/definitions/io.k8s.api.core.v1.EnvVar",
                        "type": "object"
                    },
                    "type": ["array","null"],
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "items": {
                        "_$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.24.0/_definitions.json#/definitions/io.k8s.api.core.v1.EnvFromSource",
                        "type": "object"
                    },
                    "type": ["array","null"]
                },
                "readinessProbe": {
                    "_$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.24.0/_definitions.json#/definitions/io.k8s.api.core.v1.Probe",
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": ["object","null"]
                },
                "resources": {
                    "_$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.24.0/_definitions.json#/definitions/io.k8s.api.core.v1.ResourceRequirements",
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "type": ["object","null"]
                },
                "securityContext": {
                    "_$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.24.0/_definitions.json#/definitions/io.k8s.api.core.v1.SecurityContext",
                    "description": "SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                    "type": ["object","null"]
                }
            }
        },
        "nameOverride": {
            "type": [ "string", "null" ]
        },
        "fullnameOverride": {
            "type": [ "string", "null" ]
        },
        "podAnnotations": {
            "type": [ "object", "null" ]
        },
        "podSecurityContext": {
            "_$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.24.0/_definitions.json#/definitions/io.k8s.api.core.v1.PodSecurityContext",
            "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
            "type": ["object","null"]
        },
        "hostAliases": {
            "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
            "items": {
                "_$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.24.0/_definitions.json#/definitions/io.k8s.api.core.v1.HostAlias",
                "type": "object"
            },
            "type": ["array","null"],
            "x-kubernetes-patch-merge-key": "ip",
            "x-kubernetes-patch-strategy": "merge"
        },
        "dnsConfig": {
            "_$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.24.0/_definitions.json#/definitions/io.k8s.api.core.v1.PodDNSConfig",
            "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
            "type": ["object","null"]
        }
    }
}
